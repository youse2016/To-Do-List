package com.example.gamifiedto_dolist;

import android.content.Intent;
import android.os.Bundle;
import android.view.Menu;
import android.view.MenuItem;
import androidx.appcompat.app.AppCompatActivity;
import androidx.appcompat.widget.Toolbar;
import androidx.recyclerview.widget.LinearLayoutManager;
import androidx.recyclerview.widget.RecyclerView;
import android.widget.ArrayAdapter;
import android.widget.Spinner;
import android.widget.Button;
import android.widget.Toast;
import android.view.View;
import android.widget.AdapterView;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

public class MainActivity extends AppCompatActivity {
    private ArrayList<Task> taskList;
    private TaskAdapter taskAdapter;
    private Spinner categorySpinner;
    private Spinner taskSpinner;
    private Map<String, ArrayList<String>> categoryTaskMap;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main); // Ensure this layout file exists

        // Set up the toolbar
        Toolbar toolbar = findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        getSupportActionBar().setDisplayHomeAsUpEnabled(true); // Enable the up button

        taskList = new ArrayList<>();
        taskAdapter = new TaskAdapter(taskList);

        RecyclerView recyclerView = findViewById(R.id.recyclerView);
        recyclerView.setLayoutManager(new LinearLayoutManager(this));
        recyclerView.setAdapter(taskAdapter);

        categorySpinner = findViewById(R.id.categorySpinner);
        taskSpinner = findViewById(R.id.taskSpinner);

        populateCategoryTaskMap();

        ArrayList<String> categoryList = new ArrayList<>(categoryTaskMap.keySet());
        categoryList.add(0, getString(R.string.select));

        ArrayAdapter<String> categoryAdapter = new ArrayAdapter<>(
                this, android.R.layout.simple_spinner_item, categoryList);
        categoryAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
        categorySpinner.setAdapter(categoryAdapter);

        categorySpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
            @Override
            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
                String selectedCategory = (String) parent.getItemAtPosition(position);
                if (!selectedCategory.equals(getString(R.string.select))) {
                    ArrayList<String> taskList = categoryTaskMap.get(selectedCategory);
                    taskList.add(0, getString(R.string.select));
                    ArrayAdapter<String> taskAdapter = new ArrayAdapter<>(
                            MainActivity.this, android.R.layout.simple_spinner_item, taskList);
                    taskAdapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
                    taskSpinner.setAdapter(taskAdapter);
                } else {
                    taskSpinner.setAdapter(null);
                }
            }

            @Override
            public void onNothingSelected(AdapterView<?> parent) {
                taskSpinner.setAdapter(null);
            }
        });

        Button addTaskButton = findViewById(R.id.addTaskButton);
        addTaskButton.setOnClickListener(view -> addTask());

        // Implement battle button and logic
        Button battleButton = findViewById(R.id.battleButton);
        battleButton.setOnClickListener(view -> performWeeklyBattle());
    }

    @Override
    public boolean onCreateOptionsMenu(Menu menu) {
        getMenuInflater().inflate(R.menu.main_menu, menu);
        return true;
    }

    @Override
    public boolean onOptionsItemSelected(MenuItem item) {
        int id = item.getItemId();
        if (id == R.id.action_logout) {
            // Handle logout action
            logout();
            return true;
        } else if (id == R.id.action_delete_account) {
            // Handle delete account action
            deleteAccount();
            return true;
        } else if (id == android.R.id.home) {
            onBackPressed(); // Handle the up button action
            return true;
        }
        return super.onOptionsItemSelected(item);
    }

    private void logout() {
        // Implement your logout logic here
        Toast.makeText(this, "Logged out", Toast.LENGTH_SHORT).show();
        // Navigate to LoginActivity or perform other actions
        Intent intent = new Intent(MainActivity.this, LoginActivity.class);
        startActivity(intent);
        finish();
    }

    private void deleteAccount() {
        // Implement your delete account logic here
        Toast.makeText(this, "Account deleted", Toast.LENGTH_SHORT).show();
        // Perform account deletion and navigate to appropriate screen
        // For example, navigate to LoginActivity
        Intent intent = new Intent(MainActivity.this, LoginActivity.class);
        startActivity(intent);
        finish();
    }

    private void populateCategoryTaskMap() {
        categoryTaskMap = new HashMap<>();
        categoryTaskMap.put("Physical Health", new ArrayList<>(Arrays.asList(
                "Go for a run", "Exercise for 30 minutes", "Drink 8 glasses of water", "Do yoga", "Take a 30-minute walk",
                "Stretch for 10 minutes", "Do a workout session", "Join a fitness class", "Swim for 30 minutes", "Ride a bike for 1 hour"
        )));
        categoryTaskMap.put("Mental Health", new ArrayList<>(Arrays.asList(
                "Meditate for 10 minutes", "Read a book", "Practice yoga", "Journal for 15 minutes", "Listen to calming music",
                "Take a relaxation bath", "Do a digital detox for 1 hour", "Practice deep breathing exercises", "Talk to a therapist",
                "Do a creative activity (e.g., painting, drawing)"
        )));
        categoryTaskMap.put("Spiritual Health", new ArrayList<>(Arrays.asList(
                "Prayer", "Reflection", "Community Service", "Read a spiritual book", "Attend a spiritual gathering",
                "Practice mindfulness", "Spend time in nature", "Volunteer at a local organization", "Join a meditation group",
                "Practice gratitude journaling"
        )));
        categoryTaskMap.put("Prosperity", new ArrayList<>(Arrays.asList(
                "Complete project report", "Attend team meeting", "Prepare for the client presentation", "Finish coding the new feature",
                "Review pull requests", "Write a blog post", "Learn a new programming language", "Take an online course",
                "Prepare a budget", "Invest time in a side project"
        )));
    }

    private void addTask() {
        String taskTitle = taskSpinner.getSelectedItem().toString();
        String selectedCategory = categorySpinner.getSelectedItem().toString();

        if (!taskTitle.equals(getString(R.string.select))) {
            Task newTask = new Task(taskTitle, selectedCategory);
            taskList.add(newTask);
            taskAdapter.notifyItemInserted(taskList.size() - 1);
        }
    }

    private void performWeeklyBattle() {
        int totalTasks = taskList.size();
        int userPerformance = calculateUserPerformance();
        int aiPerformance = simulateAIPerformance();

        String resultMessage;
        if (totalTasks > 0 && userPerformance >= (totalTasks * 0.7) && userPerformance >= aiPerformance) {
            resultMessage = "Congratulations! You won the battle!";
        } else {
            resultMessage = "You lost the battle. Try to complete more tasks next week!";
        }

        Toast.makeText(this, resultMessage, Toast.LENGTH_LONG).show();
    }

    private int calculateUserPerformance() {
        int completedTasks = 0;
        for (Task task : taskList) {
            if (task.isCompleted()) {
                completedTasks++;
            }
        }
        return completedTasks;
    }

    private int simulateAIPerformance() {
        // Simulate AI performance (e.g., a random number of tasks completed)
        return (int) (Math.random() * taskList.size());
    }
}
